#![allow(unknown_lints)]
#![allow(clippy)]

use std::str::FromStr;
use std::sync::Arc;
use parse::ast::{
    ArrayIndexData,
    AssignmentData,
    BinaryOpData,
    BinaryOperator,
    CallFunctionData,
    ConditionalData,
    DeclareConstData,
    DeclareFunctionData,
    DeclareRegisterData,
    DeclareVariableData,
    Expression,
    GoToData,
    InlineAsmData,
    NameData,
    NameType,
    NumberData,
    OrgData,
    ReturnData,
    TextData,
    WhileLoopData,
};
use type_expr::BaseType;
use src_tag::SrcTag;
use lalrpop_util::ErrorRecovery;
use parse::unescape_string;

grammar<'err>(src_unit: usize, errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);

match {
    r"#[^\n]*"
} else {
    _
}

Comment: () = {
    r"#[^\n]*"
};

Number: i32 = {
    // Base 10
    <s:r"[0-9]+"> => i32::from_str(s).unwrap(),
    // Base 16
    <s:r"0x[0-9A-Fa-f]+"> => i32::from_str_radix(&s[2..], 16).unwrap(),
};

Str: Arc<String> = {
    r"\x22(?:[^\x22\\]|\\.)*\x22" => {
        let val = <>;
        let len = val.len();
        Arc::new(unescape_string(&String::from_str(&val[1..len-1]).unwrap()))
    }
};

Name: Arc<String> = {
    r"[a-zA-Z_][\w]*" => Arc::new(String::from_str(<>).unwrap())
};

Type: BaseType = {
    "u8" => BaseType::U8,
    "u16" => BaseType::U16,
    "void" => BaseType::Void,
    "&" "[" <t:Type> "]" => BaseType::Pointer(Box::new(t)),
};

NameType: NameType = {
    <n:Name> ":" <t:Type> => NameType::new(n, t),
};

ParameterList: Vec<NameType> = {
    <l:ParameterList> "," <p:NameType> => {
        let mut result = l;
        result.push(p);
        result
    },
    NameType => vec![<>],
};

ComparisonOp: BinaryOperator = {
    "<" => BinaryOperator::LessThan,
    ">" => BinaryOperator::GreaterThan,
    "<=" => BinaryOperator::LessThanEqual,
    ">=" => BinaryOperator::GreaterThanEqual,
    "==" => BinaryOperator::Equal,
    "!=" => BinaryOperator::NotEqual,
};

Comparison: Box<Expression> = {
    <t:@L> <l:Comparison> <o:ExprOp> <r:Factor> => Box::new(Expression::BinaryOp(BinaryOpData::new(SrcTag::new(src_unit, t), o, l, r))),
    Factor,
};

ExprOp: BinaryOperator = {
    "+" => BinaryOperator::Add,
    "-" => BinaryOperator::Sub,
};

Factor: Box<Expression> = {
    <t:@L> <l:Factor> <o:FactorOp> <r:Term> => Box::new(Expression::BinaryOp(BinaryOpData::new(SrcTag::new(src_unit, t), o, l, r))),
    Term,
};

FactorOp: BinaryOperator = {
    "*" => BinaryOperator::Mul,
    "/" => BinaryOperator::Div,
};

Term: Box<Expression> = {
    <t:@L> <n:Number> => Box::new(Expression::Number(NumberData::new(SrcTag::new(src_unit, t), n))),
    <t:@L> <n:Name> => Box::new(Expression::Name(NameData::new(SrcTag::new(src_unit, t), n))),
    <t:@L> <s:Str> => Box::new(Expression::Text(TextData::new(SrcTag::new(src_unit, t), s))),
    ArrayIndex,
    FunctionCall,
    "(" <Expression> ")",
};

ArrayIndex: Box<Expression> = {
    <t:@L> <n:Name> "[" <idx:Expression> "]" => Box::new(Expression::ArrayIndex(ArrayIndexData::new(SrcTag::new(src_unit, t), n, idx))),
};

FunctionCall: Box<Expression> = {
    <t:@L> <n:Name> "(" ")" => Box::new(Expression::CallFunction(CallFunctionData::new(SrcTag::new(src_unit, t), n, Vec::new()))),
    <t:@L> <n:Name> "(" <args:ExpressionCommaList> ")" => Box::new(Expression::CallFunction(CallFunctionData::new(SrcTag::new(src_unit, t), n, args))),
};

LValue: Box<Expression> = {
    <t:@L> <n:Name> => Box::new(Expression::Name(NameData::new(SrcTag::new(src_unit, t), n))),
    ArrayIndex,
};

Expression: Box<Expression> = {
    <t:@L> <l:Expression> <o:ComparisonOp> <r:Comparison> => Box::new(Expression::BinaryOp(BinaryOpData::new(SrcTag::new(src_unit, t), o, l, r))),
    Comparison,
};

ExpressionCommaList: Vec<Expression> = {
    <l:ExpressionCommaList> "," <e:Expression> => {
        let mut result = l;
        result.push(*e);
        result
    },
    Expression => vec![*<>],
};

Statement: Box<Expression> = {
    Comment => Box::new(Expression::Comment),
    <t:@L> "const" <nt:NameType> "=" <l:Expression> ";" =>
        Box::new(Expression::DeclareConst(DeclareConstData::new(SrcTag::new(src_unit, t), nt, l))),
    <t:@L> "var" <nt:NameType> "=" <l:Expression> ";" =>
        Box::new(Expression::DeclareVariable(DeclareVariableData::new(SrcTag::new(src_unit, t), nt, l))),
    <t:@L> <val:LValue> "=" <l:Expression> ";" =>
        Box::new(Expression::Assignment(AssignmentData::new(SrcTag::new(src_unit, t), val, l))),
    <t:@L> "if" <cnd:Expression> "then" <trb:StatementList> "end" =>
        Box::new(Expression::Conditional(ConditionalData::new(SrcTag::new(src_unit, t), cnd, trb, Vec::new()))),
    <t:@L> "if" <cnd:Expression> "then" <trb:StatementList> "else" <frb:StatementList> "end" =>
        Box::new(Expression::Conditional(ConditionalData::new(SrcTag::new(src_unit, t), cnd, trb, frb))),
    <t:@L> "while" <cnd:Expression> "do" <bdy:StatementList> "end" =>
        Box::new(Expression::WhileLoop(WhileLoopData::new(SrcTag::new(src_unit, t), cnd, bdy))),
    <t:@L> "inline_asm" <asm:Str> ";" =>
        Box::new(Expression::InlineAsm(InlineAsmData::new(SrcTag::new(src_unit, t), asm))),
    <t:@L> "memory" <nt:NameType> "@" <l:Number> ";" =>
        Box::new(Expression::DeclareRegister(DeclareRegisterData::new(SrcTag::new(src_unit, t), nt, l))),
    "break" ";" => Box::new(Expression::Break),
    <t:@L> "return" <v:Expression> ";" => Box::new(Expression::Return(ReturnData::new(SrcTag::new(src_unit, t), Some(v)))),
    <t:@L> "return" ";" => Box::new(Expression::Return(ReturnData::new(SrcTag::new(src_unit, t), None))),
    <t:@L> "goto" <n:Name> ";" => Box::new(Expression::GoTo(GoToData::new(SrcTag::new(src_unit, t), n))),
    <f:FunctionCall> ";" => f,
    // Error recovery was causing infinite loops
    // See: https://github.com/nikomatsakis/lalrpop/issues/240
    // Can uncomment the following when that's fixed
    //! => {
    //    errors.push(<>);
    //    Box::new(Expression::Error)
    //},
};

StatementList: Vec<Expression> = {
    <l:StatementList> <s:Statement> => {
        let mut result = l;
        result.push(*s);
        result
    },
    Statement => vec![*<>],
};

TopLevelStatement: Box<Expression> = {
    <t:@L> "org" <n:Number> ";" => Box::new(Expression::Org(OrgData::new(SrcTag::new(src_unit, t), n))),
    <t:@L> "register" <nt:NameType> "@" <l:Number> ";" =>
        Box::new(Expression::DeclareRegister(DeclareRegisterData::new(SrcTag::new(src_unit, t), nt, l))),
    <t:@L> "def" <n:Name> "(" ")" ":" <rt:Type> <b:StatementList> "end" =>
        Box::new(Expression::DeclareFunction(DeclareFunctionData::new(SrcTag::new(src_unit, t), n, Vec::new(), rt, b))),
    <t:@L> "def" <n:Name> "(" <pl:ParameterList> ")" ":" <rt:Type> <b:StatementList> "end" =>
        Box::new(Expression::DeclareFunction(DeclareFunctionData::new(SrcTag::new(src_unit, t), n, pl, rt, b))),
    Statement,
};

pub Program: Vec<Expression> = {
    <p:Program> <tl:TopLevelStatement> => {
        let mut result = p;
        result.push(*tl);
        result
    },
    TopLevelStatement => vec![*<>],
};
